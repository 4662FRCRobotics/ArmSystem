// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.ArmSystem.subsystems;

import org.usfirst.frc4662.ArmSystem.Robot;
import org.usfirst.frc4662.ArmSystem.RobotMap;
import org.usfirst.frc4662.ArmSystem.commands.Arm.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ArmLinearActuator extends Subsystem {

    private DigitalInput homeLocSw; 
    private DigitalInput scoopLimSw;
    private DigitalInput topLimSw;
    
    private SpeedController armLiftMotor;
    
    private AnalogPotentiometer armPosPot;
    
    private final Boolean invMotor = true;
    private final double invSpeed = -1.0;
    
    private double m_dHomeSetpoint = 0;
    private double m_dSetpoint = 0; 
    private double m_dSetpointTbl [] = {10.5, 15.0, 22.0, 27.0};
    private int m_iSetPIx = 0;
    
    private double m_dArmPVal = -0.7;
    private double m_dArmIVal = -0.0;
    private double m_dArmDVal = -0.5;
    private double m_dArmTolerance = 0.80;
    
    public PIDController armPID;// = new PIDController(m_dArmPVal, m_dArmIVal, m_dArmDVal, armPosPot, armLiftMotor);
        
    public void ArmLinearActuator() {
    	
        homeLocSw = new DigitalInput(RobotMap.iArmHomeLocSw);
        scoopLimSw = new DigitalInput(RobotMap.iArmBotLimSw);
        topLimSw = new DigitalInput(RobotMap.iArmTopLimSw);
        
        armLiftMotor = new Talon(RobotMap.iArmMotor);
        
        armPosPot = new AnalogPotentiometer(RobotMap.iArmPosPot,330,-260);
        
        armPID = new PIDController(m_dArmPVal, m_dArmIVal, m_dArmDVal, armPosPot, armLiftMotor);
    	
        if (invMotor) {
    		armLiftMotor.setInverted(invMotor);
    	}
     }
    
    public void initDefaultCommand() {
      	setDefaultCommand(new JoystickArmMove());
    }
    
    public void moveArm(double speed) {
    	
    	if (isTop() == true) {
    		if((invMotor == true & speed < 0) || (invMotor == false & speed > 0)) {
    			speed = 0;
    		}
        } else {
    		if (isBottom() == true) {
        		if((invMotor == true & speed > 0) || (invMotor == false & speed < 0)) {
        			speed = 0;
        		}
    		}
    	}
    	
    	armLiftMotor.set(speed);
    	logArm();
    	
    }
    
    public void moveUp() {
    	double speed = 1 * invSpeed;
      	moveArm(speed);
    }
    
     public void moveDown() {
    	double speed = -1 * invSpeed;
       	moveArm(speed);
    }
    
    public void newHomePID(){
    	this.m_dHomeSetpoint = this.getArmPID();
    }
    
    public void stopArm() {
       	if (armPID.isEnabled()) {
       		armPID.reset();
       		armPID.disable();
       	}
    	moveArm(0);
    }
    
    public void setArmPID(){
    	armPID.reset();
    	armPosPot.setPIDSourceType(PIDSourceType.kDisplacement);
    	armPID.setInputRange(-2,55);
    	armPID.setOutputRange(-1, 1);
    	armPID.setSetpoint(m_dSetpoint);
    	armPID.setPID(m_dArmPVal, m_dArmIVal, m_dArmDVal);
    	armPID.setAbsoluteTolerance(m_dArmTolerance);
    	armPID.enable();
    }
    
    public void moveHome() {
    	m_dSetpoint = m_dHomeSetpoint;
    }
    
     
    public void setARMSetpoint(double setpoint) {
    	m_dSetpoint = setpoint;
    }
    
    public void setArmSetpointTbl(boolean isUp) {
    	m_dSetpoint = m_dSetpointTbl[m_iSetPIx] + m_dHomeSetpoint;
    	if (isUp == true) {
    		m_iSetPIx = (m_iSetPIx + 1) % m_dSetpointTbl.length;
    	} else {
    		m_iSetPIx = m_iSetPIx - 1;
    		if (m_iSetPIx < 0) {
    			m_iSetPIx = m_dSetpointTbl.length - 1;
    		}
    	}

    }
    
    public boolean isOnTarget(){
    	return armPID.onTarget() || this.isTop() || this.isBottom();
    }
    
    public boolean isTop() {
    	return !topLimSw.get();
    }
    
    public boolean isBottom() {
    	return !scoopLimSw.get();
    }
    
    public boolean isHome() {
    	return !homeLocSw.get();
    }
    
    public double getArmPID(){
    	return armPosPot.pidGet();
    }
    
    public void dashboardDisplay() {
		SmartDashboard.putNumber("Arm P Val", m_dArmPVal);
		SmartDashboard.putNumber("Arm I Val", m_dArmIVal);
		SmartDashboard.putNumber("Arm D Val", m_dArmDVal);
		SmartDashboard.putNumber("Arm Tolerance", m_dArmTolerance);
		SmartDashboard.putNumber("Arm Target", m_dSetpoint);
    }
    
    public void dashboardFetch() {
    	m_dArmPVal = SmartDashboard.getNumber("Arm P Val", m_dArmPVal);
		m_dArmIVal = SmartDashboard.getNumber("Arm I Val", m_dArmIVal);
		m_dArmDVal = SmartDashboard.getNumber("Arm D Val", m_dArmDVal);
		m_dArmTolerance = SmartDashboard.getNumber("Arm Tolerance", m_dArmTolerance);
		m_dSetpoint = SmartDashboard.getNumber("Arm Target", m_dSetpoint);
    }
    
    public void logArm() {
    	SmartDashboard.putNumber("Arm Pot Value", armPosPot.get());
    	SmartDashboard.putNumber("Arm Pot PIDGet", armPosPot.pidGet());
    	SmartDashboard.putNumber("Arm Home Setpoint", m_dHomeSetpoint);
    	SmartDashboard.putNumber("Arm PID Setpoint", m_dSetpoint);
       	SmartDashboard.putNumber("Arm Setpt Tbl Ix", m_iSetPIx);
    	
    	SmartDashboard.putBoolean("Home Switch", isHome());
    	SmartDashboard.putBoolean("Top Lim Switch", isTop());
    	SmartDashboard.putBoolean("Bot Lim Switch", isBottom());
    	
    	if (armPID.isEnabled()) {
           	SmartDashboard.putNumber("Arm PID Loop Value", armPID.get());
          	SmartDashboard.putBoolean("Arm PID On Target", armPID.onTarget());
    	}
    	
     }
 }

